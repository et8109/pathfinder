diff --git a/android/res/layout/create_event.xml b/android/res/layout/create_event.xml
new file mode 100644
index 0000000..9b25047
--- /dev/null
+++ b/android/res/layout/create_event.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              >
+  <TextView
+      android:id="@+id/create_event_status_textview"
+      android:layout_width="match_parent" 
+      android:layout_height="wrap_content" 
+      android:text="@string/create_event_status_textview_text"
+      />
+  <EditText
+      android:id="@+id/create_event_eventname_edittext"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:hint="@string/create_event_eventname_edittext_hint"
+      />
+  <EditText
+      android:id="@+id/create_event_location_edittext"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:hint="@string/create_event_location_edittext_hint"
+      />
+  <CheckBox android:id="@+id/create_event_byob_checkbox"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:text="@string/create_event_byob_checkbox_text"
+      />
+  <DatePicker
+      android:id="@+id/create_event_date_datepicker"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:endYear="2100"
+      android:startYear="1900" />
+  <TimePicker
+      android:id="@+id/create_event_date_timepicker"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content" />
+  <Button
+      android:id="@+id/create_event_submit_button"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:text="@string/create_event_submit_button_text"
+      android:onClick="onSubmitButtonClicked"
+      />
+</LinearLayout>
diff --git a/android/res/values/strings.xml b/android/res/values/strings.xml
index dc45f21..eaaba12 100644
--- a/android/res/values/strings.xml
+++ b/android/res/values/strings.xml
@@ -8,4 +8,11 @@
     <string name="create_user_email_edittext_hint">Email</string>
     <string name="create_user_male_radiobutton_text">Male</string>
     <string name="create_user_female_radiobutton_text">Female</string>
+
+    <string name="create_event_submit_button_text">Create Event</string>
+    <string name="create_event_status_textview_text">Ready</string>
+    <string name="create_event_eventname_edittext_hint">Event name</string>
+    <string name="create_event_location_edittext_hint">location</string>
+    <string name="create_event_byob_checkbox_text">byob?</string>
+
 </resources>
diff --git a/android/src/com/pinata/android/CreateEventActivity.java b/android/src/com/pinata/android/CreateEventActivity.java
new file mode 100644
index 0000000..ed42045
--- /dev/null
+++ b/android/src/com/pinata/android/CreateEventActivity.java
@@ -0,0 +1,190 @@
+package com.pinata.android;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.Date;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.TimePicker;
+import android.widget.EditText;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.CheckBox;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import android.view.View;
+
+import com.pinata.android.client.*;
+import com.pinata.android.client.http.*;
+import com.pinata.shared.*;
+
+/**
+ * CreateEventActivity UI Handling Routines.
+ */
+public class CreateEventActivity extends Activity {
+
+    /** The application status TextView. */
+    private TextView statusTextView;
+    /** The eventname EditText. */
+    private EditText eventnameEditText;
+    /** The location EditText. */
+    private EditText locationEditText;
+    /** The byob checkbox. */
+    private CheckBox byobCheckBox;
+    /** The datePicker control. */
+    private DatePicker datePicker;
+    /** The timepicker control. */
+    private TimePicker timePicker;
+    /** The Create button. */
+    private Button submitButton;
+
+    /**
+     * Called by Android OS when activity is first started.
+     */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Load window XML layout.
+        setContentView(R.layout.create_event);
+
+        // Find view buttons and save references to convenient fields.
+        this.statusTextView 
+            = (TextView)this.findViewById(R.id.create_event_status_textview);
+        this.eventnameEditText
+            = (EditText)this.findViewById(R.id.create_event_eventname_edittext);
+        this.locationEditText
+            = (EditText)this.findViewById(R.id.create_event_location_edittext);
+        this.byobCheckBox
+            = (CheckBox)this.findViewById(R.id.create_event_byob_checkbox);
+        this.datePicker
+            = (DatePicker)this.findViewById(R.id.create_event_date_datepicker);
+        this.timePicker
+            = (TimePicker)this.findViewById(R.id.create_event_date_timepicker);
+        this.submitButton
+            = (Button)this.findViewById(R.id.create_event_submit_button);
+    }
+
+    /**
+     * Called when the submit button is clicked. Makes async server call to
+     * create a new event.
+     * @param The view that was clicked, the submit button.
+     */
+    public void onSubmitButtonClicked(View view) {
+        new AsyncCreateEventRequest().execute();
+    }
+
+    /**
+     * Defines an async CreateEvent operation that grabs data from the UI
+     * widgets, tells the server to make a new event, and then updates the
+     * statusTextView.
+     * @author Christian Gunderman
+     */
+    private class AsyncCreateEventRequest extends AsyncClientOperation {
+
+        /** The eventname of the event to create. */
+        private String eventname;
+        /** The location for the new event. */
+        private String location;
+        /** The value of byob, */
+        private boolean byob;
+        /** The date for the new event. */
+        private Date date;
+
+        /**
+         * Async operation setup routine. This routine is run on the UI thread
+         * before the async operation is run. It grabs all of the necessary info
+         * the async operation needs from the UI controls and saves it in this
+         * object because the async operation thread cannot access UI objects.
+         */
+        @Override
+        protected void uiThreadBefore() {
+            // TODO: start wait cursor animation.
+            statusTextView.setText("Creating event...");
+
+            // Cache any data from the UI that we need for this request.
+            this.eventname = eventnameEditText.getText().toString();
+            this.location = locationEditText.getText().toString();
+            this.byob
+                = byobCheckBox.isChecked();
+
+            Calendar calendar = new GregorianCalendar(
+                    datePicker.getYear(),                                                      datePicker.getMonth(),                                                     datePicker.getDayOfMonth(),
+                    timePicker.getCurrentHour(),
+                    timePicker.getCurrentMinute());
+
+            this.date = new Date(calendar.getTimeInMillis());
+        }
+
+        /**
+         * Async operation routine. This routine is run by a background worker
+         * thread, allowing the UI thread to go undisturbed while HTTP requests
+         * are being sent. This method cannot access UI elements, so that is
+         * done in uiThreadBefore() and cached in this object. Any
+         * ClientExceptions thrown from this method are automatically grabbed
+         * and unwrapped and dispatched to the uiThreadAfterFailure() method
+         * back on the UI thread.
+         * This implementation performs a CreateEvent request via the Event
+         * object.
+         * @param client A pre-instantiated HttpClient object.
+         */
+        @Override
+        protected void backgroundThreadOperation(HttpClient client)
+            throws ClientException {
+            // Create new event on server.
+            Event.create(client,
+                        eventname,
+                        location,
+                        date,
+                        byob);
+        }
+
+        /**
+         * This method is run on the UI thread if this object's cancel method
+         * is called. It allows for the update of UI elements to inform the event
+         * that the requested operation has ceased.
+         */
+        @Override
+        protected void uiThreadOperationCancelled() {
+            statusTextView.setText(ClientStatus.APP_CANCELLED.message);
+        }
+
+        /**
+         * After the backgroundThreadOperation() function finishes executing,
+         * if no exceptions occur, this method is called to signal that the
+         * process is assumed to be a success. To signal that the background
+         * process was a failure, backgroundThreadOperation() must throw a
+         * ClientException.
+         */
+        @Override
+        protected void uiThreadAfterSuccess() {
+            statusTextView.setText(ClientStatus.OK.message);
+        }
+
+        /**
+         * The background operation failure handler method. This method is
+         * called automatically if a ClientException was thrown from the
+         * backgroundThreadOperation() function. Message contains the
+         * ClientException message, and the ApiException message too,
+         * if the ClientException has an inner ApiException (exception
+         * passed from the server).
+         * @param message The UI friendly error message from the client
+         * level AND/OR passed back from the server.
+         * @param clientStatus A ClientStatus enum relating the current
+         * status of the application.
+         * @param apiStatus The server's status reply. This value is null
+         * unless clientStatus == ClientStatus.API_ERROR.
+         */
+        @Override
+        protected void uiThreadAfterFailure(String message,
+                                            ClientStatus clientStatus,
+                                            ApiStatus apiStatus) {
+            statusTextView.setText(message);
+        }
+    }
+}
diff --git a/android/src/com/pinata/android/client/Event.java b/android/src/com/pinata/android/client/Event.java
new file mode 100644
index 0000000..fd68ca0
--- /dev/null
+++ b/android/src/com/pinata/android/client/Event.java
@@ -0,0 +1,67 @@
+package com.pinata.android.client;
+
+import java.util.Date;
+
+import com.pinata.shared.*;
+import com.pinata.android.client.http.*;
+
+/**
+ * Android Client side Event object.
+ */
+public class Event {
+    /** Event ID */
+    private int ID;
+    /** Eventname. */
+    private String eventname;
+    /** Event's location. */
+    private String location;
+    /** Date event date. */
+    private Date date;
+    /** Event's byob status*/
+    private boolean byob;
+
+    /**
+     * Attempts to make a REST call to create a new event on the server.
+     * @throws ClientException If a parameter is null or not within the accepted
+     * set of values or a database or communication error occurs.
+     * @param sql The connection to the database.
+     * @param eventname The event's eventname.
+     * @param location The event's location.
+     * @param date The event's date.
+     * @param byob The event's byob status.
+     * @return A new Event object containing the created event.
+     */
+    public static Event create(HttpClient client,
+                              String eventname,
+                              String location,
+                              Date date,
+                              boolean byob) throws ClientException {
+        // Create JSON request object.
+        CreateEventRequest request = new CreateEventRequest(eventname,
+                                                          location,
+                                                          byob,
+                                                          date);
+        // Send request.
+        EventResponse response
+            = EventsClient.doCreateEventRequest(client, request);
+
+        return new Event(response.eventID, response.name, response.location, response.date, response.byob);
+    }
+
+    /**
+     * Creates a new Event OM object. Constructor is private because Event
+     * objects can only be created internally from REST calls.
+     * @param ID The event's ID.
+     * @param eventname The event's eventname.
+     * @param location The event's location.
+     * @param date The event's date.
+     * @param byob The event's byob status.
+     */
+    private Event(int ID, String eventname, String location, Date date, boolean byob) {
+        this.ID = ID;
+        this.eventname = eventname;
+        this.location = location;
+        this.date = date;
+        this.byob = byob;
+    }
+}
diff --git a/android/src/com/pinata/android/client/http/EventsClient.java b/android/src/com/pinata/android/client/http/EventsClient.java
new file mode 100644
index 0000000..9d191f4
--- /dev/null
+++ b/android/src/com/pinata/android/client/http/EventsClient.java
@@ -0,0 +1,35 @@
+package com.pinata.android.client.http;
+
+import com.pinata.android.client.*;
+import com.pinata.shared.*;
+
+/**
+ * HTTP Client methods for the events API endpoints.
+ */
+public abstract class EventsClient {
+
+    private static final String RESOURCE_EVENTS = "/api/v1/events";
+
+    /**
+     * Performs CreateEventRequest on events end point.
+     * @throws ClientException Thrown if the request is not successful
+     * for any reason, including a non 2XX HTTP response code.
+     * @param client The HttpClient to make the request.
+     * @param request The CreateEventRequest to send via JSON.
+     * @return EventResponse The unmodified server response, deserialized
+     * to a class, if successful.
+     */
+    public static EventResponse doCreateEventRequest(HttpClient client,
+                                     CreateEventRequest request)
+        throws ClientException {
+
+        EventResponse eventResponse = new EventResponse();
+        client.doRequest(HttpClient.Verb.POST,
+                         RESOURCE_EVENTS,
+                         null,
+                         request,
+                         eventResponse);
+
+        return eventResponse;
+    }
+}
diff --git a/android/src/com/pinata/android/client/http/HttpClient.java b/android/src/com/pinata/android/client/http/HttpClient.java
index e6e0e94..b0bdf58 100644
--- a/android/src/com/pinata/android/client/http/HttpClient.java
+++ b/android/src/com/pinata/android/client/http/HttpClient.java
@@ -28,7 +28,7 @@ public class HttpClient {
     /** User agent: tells the server who this is that is connecting. */
     private static final String USER_AGENT = "Android/PinataClient";
     /** Domain name of the server to connect to. */
-    private static final String HOSTNAME = "gundersonofboss.case.edu:8080";
+    private static final String HOSTNAME = "localhost:8080";
 
     /** The HTTP client object backing this. */
     private final AndroidHttpClient httpClient;
diff --git a/service/src/main/java/com/pinata/service/api/v1/Events1Resource.java b/service/src/main/java/com/pinata/service/api/v1/Events1Resource.java
new file mode 100644
index 0000000..987b16b
--- /dev/null
+++ b/service/src/main/java/com/pinata/service/api/v1/Events1Resource.java
@@ -0,0 +1,118 @@
+package com.pinata.service.api.v1;
+
+import java.util.Date;
+import java.net.URI;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import com.pinata.service.datatier.SQLConnection;
+import com.pinata.service.objectmodel.Event;
+
+import com.pinata.shared.ApiException;
+import com.pinata.shared.ApiStatus;
+import com.pinata.shared.CreateEventRequest;
+import com.pinata.shared.EventResponse;
+
+/**
+ * Events resource used for the creation of events. v1.
+ */
+@Path("v1/events")
+public class Events1Resource {
+
+    /** Injected information about the URI of the current request. */
+    @Context
+    UriInfo uriInfo;
+
+    /**
+     * Post Request. Creates a new event in the database and returns a
+     * CreateEventResponse, or an ErrorApiResponse in JSON.
+     * @param jsonBody The POST json body.
+     * @return The input values in a CreateUserResponse with SUCCESS,
+     * or an ErrorApiResponse upon an error.
+     */
+    @POST
+    @Produces(MediaType.APPLICATION_JSON)
+    @Consumes(MediaType.APPLICATION_JSON)
+    public Response post(String jsonBody) throws ApiException {
+        CreateEventRequest request = new CreateEventRequest();
+        request.deserializeFrom(jsonBody);
+
+        SQLConnection sql = SQLConnection.connectDefault();
+
+        Event event = null;
+        try {
+            event = Event.create(sql,
+                               request.name,
+                               request.location,
+                               request.date,
+                               request.byob);
+        } finally {
+            sql.close();
+        }
+
+        URI newEventUri = uriInfo.getRequestUriBuilder()
+            .path(event.getName()).build();
+
+        EventResponse eventResponse = event.toResponse(ApiStatus.CREATED);
+
+        return Response.created(newEventUri)
+            .entity(eventResponse.serialize()).build();
+    }
+
+    /**
+     * GET request. Pulls down event's profile.
+     * @param eventID ID of the event to pull down.
+     */
+    @GET
+    @Produces(MediaType.APPLICATION_JSON)
+    @Path("{eventID}")
+    public Response get(@PathParam("eventID") int eventID)
+        throws ApiException {
+
+        SQLConnection sql = SQLConnection.connectDefault();
+
+        Event event = null;
+        try {
+            event = Event.lookup(sql, eventID);
+        } finally {
+            sql.close();
+        }
+
+        EventResponse eventResponse = event.toResponse(ApiStatus.OK);
+        return Response.ok(eventResponse.serialize()).build();
+    }
+
+    /**
+     * DELETE request. Deletes the specified event and returns it's details.
+     * @param eventID ID of the event to delete
+     */
+    @DELETE
+    @Produces(MediaType.APPLICATION_JSON)
+    @Path("{eventID}")
+    public Response delete(@PathParam("eventID") int eventID)
+        throws ApiException {
+
+        SQLConnection sql = SQLConnection.connectDefault();
+
+        Event event = null;
+        try {
+            event = Event.lookup(sql, eventID);
+            event.delete(sql, eventID);
+        } finally {
+            sql.close();
+        }
+
+        EventResponse eventResponse = event.toResponse(ApiStatus.DELETED);
+        return Response.ok(eventResponse.serialize()).build();
+    }
+}
diff --git a/service/src/main/java/com/pinata/service/datatier/EventsTable.java b/service/src/main/java/com/pinata/service/datatier/EventsTable.java
new file mode 100644
index 0000000..7f272cf
--- /dev/null
+++ b/service/src/main/java/com/pinata/service/datatier/EventsTable.java
@@ -0,0 +1,145 @@
+package com.pinata.service.datatier;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.Statement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.SQLIntegrityConstraintViolationException;
+
+import java.util.Date;
+
+import com.pinata.shared.ApiException;
+import com.pinata.shared.ApiStatus;
+
+/**
+ * Wrapper class for SQL Events Table. Ideally there should be a 1:1 mapping
+ * between SQL queries and methods in this file. Methods in this file, although
+ * public, need maintain only basic database integrity. Exhaustive error
+ * checking is done in Event.java in objectmodel.
+ */
+public class EventsTable {
+
+    /** Creates this table. */
+    private static final String CREATE_TABLE_QUERY =
+        "CREATE TABLE Events(" +
+        "  eid INT NOT NULL AUTO_INCREMENT," +
+        "  name VARCHAR(30) NOT NULL," +
+        "  location VARCHAR(200) NOT NULL," +
+        "  date DATETIME NOT NULL," +
+        "  byob BOOLEAN NOT NULL," +
+        "  PRIMARY KEY(eid) " +
+        ")";
+
+    /** Create events query. */
+    private static final String INSERT_EVENT_QUERY =
+        "INSERT INTO Events (name, location, date, byob)" +
+        " VALUES (?,?,?,?)";
+
+    /** Lookup event query. */
+    private static final String LOOKUP_EVENT_QUERY =
+        "SELECT * FROM Events WHERE eid=?";
+
+    /** Delete event query. */
+    private static final String DELETE_EVENT_QUERY =
+        "DELETE FROM Events WHERE eid=?";
+
+    /**
+     * Creates this table, failing if it already exists.
+     * @param sql The SQLConnection instance. Probably requires root.
+     */
+    public static void create(SQLConnection sql) throws ApiException {
+        try {
+            Connection connection = sql.connection;
+            PreparedStatement createStatement
+                = connection.prepareStatement(CREATE_TABLE_QUERY);
+            createStatement.execute();
+        } catch (SQLException ex) {
+            throw new ApiException(ApiStatus.DATABASE_ERROR, ex);
+        }
+    }
+
+    /**
+     * Inserts a new event into this table. Note: this method does not
+     * perform exhaustive checks. That should be done by caller.
+     * @throws ApiException Thrown if an SQLException occurs.
+     * @param sql The SQLConnection.
+     * @param name The name of the event.
+     * @param location A description of where the event is.
+     * @param date The date for the event.
+     * @param byob Short for bring your own beer.
+     * @return The id of the inserted event.
+     */
+    public static int insertEvent(SQLConnection sql,
+                                  String name,
+                                  String location,
+                                  Date date,
+                                  Boolean byob) throws ApiException {
+        Connection connection = sql.connection;
+
+        try {
+            PreparedStatement insertStatement
+                = connection.prepareStatement(INSERT_EVENT_QUERY, Statement.RETURN_GENERATED_KEYS);
+            insertStatement.setString(1, name);
+            insertStatement.setString(2, location);
+            insertStatement.setDate(3, new java.sql.Date(date.getTime()));
+            insertStatement.setBoolean(4, byob);
+            insertStatement.execute();
+            //return the id of the new event
+            ResultSet rs = insertStatement.getGeneratedKeys();
+            rs.next();
+            return rs.getInt(1);
+        } catch (SQLException ex) {
+            throw new ApiException(ApiStatus.DATABASE_ERROR, ex);
+        }
+    }
+
+    /**
+     * Looks up an event in the database and returns the associated ResultSet.
+     * @throws ApiException If a SQL error occurs.
+     * @param sql The database connection.
+     * @param eid The id of the event to look up.
+     * @return user A ResultSet containing the event. Should contain only a
+     * single row.
+     */
+    public static ResultSet lookupEvent(SQLConnection sql, int eid)
+        throws ApiException {
+
+        Connection connection = sql.connection;
+
+        try {
+            PreparedStatement lookupStatement =
+                connection.prepareStatement(LOOKUP_EVENT_QUERY);
+            lookupStatement.setInt(1, eid);
+
+            return lookupStatement.executeQuery();
+        } catch (SQLException ex) {
+            throw new ApiException(ApiStatus.DATABASE_ERROR, ex);
+        }
+    }
+
+    /**
+     * Deletes an event in the database.
+     * @throws ApiException If a SQL error occurs or unable to delete.
+     * @param sql The database connection.
+     * @param eid The id of the event to delete.
+     */
+    public static void deleteEvent(SQLConnection sql, int eid)
+        throws ApiException {
+
+        Connection connection = sql.connection;
+
+        try {
+            PreparedStatement deleteStatement =
+                connection.prepareStatement(DELETE_EVENT_QUERY);
+            deleteStatement.setInt(1, eid);
+
+            // Execute and check that deletion was successful.
+            if (deleteStatement.executeUpdate() != 1) {
+                throw new ApiException(ApiStatus.APP_EVENT_NOT_EXIST);
+            }
+        } catch (SQLException ex) {
+            throw new ApiException(ApiStatus.DATABASE_ERROR, ex);
+        }
+    }
+}
diff --git a/service/src/main/java/com/pinata/service/datatier/SQLConnection.java b/service/src/main/java/com/pinata/service/datatier/SQLConnection.java
index 1ff53f0..019fa88 100644
--- a/service/src/main/java/com/pinata/service/datatier/SQLConnection.java
+++ b/service/src/main/java/com/pinata/service/datatier/SQLConnection.java
@@ -130,6 +130,7 @@ public class SQLConnection  {
             
             // Create Tables.
             UsersTable.create(sql);
+            EventsTable.create(sql);
         } catch (SQLException ex) {
             throw new ApiException(ApiStatus.DATABASE_ERROR, ex);
         }
diff --git a/service/src/main/java/com/pinata/service/objectmodel/Event.java b/service/src/main/java/com/pinata/service/objectmodel/Event.java
new file mode 100644
index 0000000..e4719d6
--- /dev/null
+++ b/service/src/main/java/com/pinata/service/objectmodel/Event.java
@@ -0,0 +1,213 @@
+package com.pinata.service.objectmodel;
+
+import java.util.Date;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import com.pinata.shared.ApiException;
+import com.pinata.shared.ApiStatus;
+import com.pinata.shared.EventResponse;
+
+import com.pinata.service.datatier.SQLConnection;
+import com.pinata.service.datatier.EventsTable;
+
+/**
+ * Event API, used for all operations pertaining to a user and he or her
+ * relations.
+ * @author Christian Gunderman
+ */
+public class Event {
+
+    /** Minumim name length. */
+    private static int NAME_MIN = 5;
+    /**
+     * Maximum name length. You MUST make sure that this value is less
+     * than or equal to the column width in EventsTable.
+     */
+    private static int NAME_MAX = 30;
+    /** Location minimum length */
+    private static int LOC_MIN = 0;
+    /** Maximum Location length. */
+    private static int LOC_MAX = 200;
+    /** Event's id. */
+    private int eid;
+    /** Event's name */
+    private String name;
+    /** Event's location */
+    private String location;
+    /** Event's date */
+    private Date date;
+    /** Event's bring your own beer. */
+    private Boolean byob;
+
+    /**
+     * Creates a new Event and stores in data tier.
+     * @throws ApiException If a parameter is null or not within the accepted
+     * set of values or a database error occurs.
+     * @param sql The connection to the database.
+     * @param name The name of the event.
+     * @param location A description of where the event is.
+     * @param date The date for the event.
+     * @param byob Short for bring your own beer.
+     * @return A new Event object containing the created Event.
+     */
+    public static Event create(SQLConnection sql,
+                               String name,
+                               String location,
+                               Date date,
+                               Boolean byob) throws ApiException {
+
+        // Null check everything:
+        OMUtil.sqlCheck(sql);
+        OMUtil.nullCheck(name);
+        OMUtil.nullCheck(location);
+        OMUtil.nullCheck(date);
+        OMUtil.nullCheck(byob);
+
+        // Check name length.
+        if (name.length() > NAME_MAX || name.length() < NAME_MIN) {
+            throw new ApiException(ApiStatus.APP_INVALID_EVENT_NAME_LENGTH);
+        }
+
+        // Check location length.
+        if (location.length() > LOC_MAX || location.length() < LOC_MIN) {
+            throw new ApiException(ApiStatus.APP_INVALID_EVENT_LOC_LENGTH);
+        }
+
+        // Check for future dates.
+        Date today = new Date();
+        if (!today.after(date)) {
+            throw new ApiException(ApiStatus.APP_INVALID_EVENT_DATE);
+        }
+
+        // Query DB.
+        int eid = EventsTable.insertEvent(sql, name, location, date, byob);
+        return new Event(eid, name, location, date, byob);
+    }
+
+    /**
+     * Looks up an event in the datatier and returns it as a Event object.
+     * @throws ApiException With APP_EVENT_NOT_EXIST if event doesn't exist     * , or another code if SQL error occurs.
+     * @param sql The SQL connection.
+     * @param eid The id of the event to look up.
+     * @return A new event object for the event.
+     */
+    public static Event lookup(SQLConnection sql, int eid)
+        throws ApiException {
+
+        // Null check everything:
+        OMUtil.sqlCheck(sql);
+        OMUtil.nullCheck(eid);
+
+        ResultSet result = EventsTable.lookupEvent(sql, eid);
+
+        // Build Event object.
+        try {
+            // Get the first (and only) row or throw if event not exist.
+            if (!result.next()) {
+                throw new ApiException(ApiStatus.APP_EVENT_NOT_EXIST);
+            }
+            
+            return new Event(result.getInt("eid"),
+                            result.getString("name"),
+                            result.getString("location"),
+                            result.getDate("date"),
+                            result.getBoolean("byob"));
+        } catch (SQLException ex) {
+            throw new ApiException(ApiStatus.DATABASE_ERROR, ex);
+        }
+    }
+
+    /**
+     * Deletes an event.
+     * @throws ApiException If a database error occurs.
+     * @param sql The SQL connection.
+     * @param username The eid of the event to delete.
+     */
+    public static void delete(SQLConnection sql, int eid)
+        throws ApiException {
+
+        // Null check everything:
+        OMUtil.sqlCheck(sql);
+        OMUtil.nullCheck(eid);
+
+        // Try to delete
+        EventsTable.deleteEvent(sql, eid);
+    }
+
+    /**
+     * Deletes this event.
+     * @throws ApiException If a database error occurs.
+     * @param sql The SQL connection.
+     */
+    public void delete(SQLConnection sql) throws ApiException {
+        Event.delete(sql, this.getID());
+    }
+    
+    /**
+     * Gets even't id.
+     * @return Unique event id.
+     */
+    public int getID() {
+        return this.eid;
+    }
+
+    /**
+     * Gets event's name.
+     * @return Event's name.
+     */
+    public String getName() {
+        return this.name;
+    }
+
+    /**
+     * Gets event's location as a string.
+     * @return The location of the event.
+     */
+    public String getLocation() {
+        return this.location;
+    }
+
+    /**
+     * Gets event's date
+     * @return The date of the event.
+     */
+    public Date getDate() {
+        return this.date;
+    }
+
+    /**
+     * Gets whether or not the event is bring your own beer.
+     * @return The byob status of the event.
+     */
+    public boolean getByob() {
+        return this.byob;
+    }
+
+    public EventResponse toResponse(ApiStatus status) {
+        return new EventResponse(status,
+                                this.getID(),
+                                this.getName(),
+                                this.getLocation(),
+                                this.getDate(),
+                                this.getByob());
+    }
+
+    /**
+     * Creates a new Event OM object. Constructor is private because Event
+     * objects can only be created internally from data tier or calls to create().
+     * @param eid The event's id.
+     * @param name The event's name.
+     * @param location The event's location.
+     * @param date The event's date.
+     * @param byob The byob status of the event.
+     */
+    private Event(int eid, String name, String location, Date date, boolean byob) {
+        this.eid = eid;
+        this.name = name;
+        this.location = location;
+        this.date = date;
+        this.byob = byob;
+    }
+}
diff --git a/shared/src/main/java/com/pinata/shared/ApiStatus.java b/shared/src/main/java/com/pinata/shared/ApiStatus.java
index 421d082..8be698a 100644
--- a/shared/src/main/java/com/pinata/shared/ApiStatus.java
+++ b/shared/src/main/java/com/pinata/shared/ApiStatus.java
@@ -28,7 +28,11 @@ public enum ApiStatus {
     APP_INVALID_BIRTHDAY(703, 400, "Birthday is in the future."),
     APP_USERNAME_TAKEN(704, 400, "A user with this name already exists."),
     APP_USER_NOT_EXIST(704, 400, "The requested user does not exist."),
-    APP_INVALID_EMAIL(705, 400, "Email address is invalid.");
+    APP_INVALID_EMAIL(705, 400, "Email address is invalid."),
+    APP_EVENT_NOT_EXIST(706, 400, "No events found with given id."),
+    APP_INVALID_EVENT_NAME_LENGTH(707, 400, "Event name is either too short or too long."),
+    APP_INVALID_EVENT_LOC_LENGTH(708, 400, "Event location is either too short or too long."),
+    APP_INVALID_EVENT_DATE(709, 400, "Event date is in the past.");
 
     /** The String name of the state (OK, MALFORMED_REQUEST, ...) */
     public final String status;
diff --git a/shared/src/main/java/com/pinata/shared/CreateEventRequest.java b/shared/src/main/java/com/pinata/shared/CreateEventRequest.java
new file mode 100644
index 0000000..b6b181b
--- /dev/null
+++ b/shared/src/main/java/com/pinata/shared/CreateEventRequest.java
@@ -0,0 +1,49 @@
+package com.pinata.shared;
+
+import java.util.Date;
+
+import flexjson.JSON;
+
+/**
+ * JSON Request for Creating a event.
+ */
+public class CreateEventRequest extends ApiRequest {
+
+    /** New event's name. */
+    @JSON(include=true, name="name")
+    public String name;
+
+    /** New event's location. */
+    @JSON(include=true, name="location")
+    public String location;
+
+    /** New event's byob." */
+    @JSON(include=true, name="byob")
+    public boolean byob;
+
+    /** New event's date. */
+    @JSON(include=true, name="date")
+    public Date date;
+
+    /**
+     * Creates a new CreateEventRequest with the provided field values.
+     * @param name Event name of the new event.
+     * @param location The new event's location.
+     * @param byob Either true or false.
+     * @param date The new event's date.
+     */
+    public CreateEventRequest(String name,
+                             String location,
+                             boolean byob,
+                             Date date) {
+        this.name = name;
+        this.location = location;
+        this.byob = byob;
+        this.date = date;
+    }
+
+    /**
+     * Creates a CreateEventRequest object with all null fields.
+     */
+    public CreateEventRequest() { }
+}
diff --git a/shared/src/main/java/com/pinata/shared/EventResponse.java b/shared/src/main/java/com/pinata/shared/EventResponse.java
new file mode 100644
index 0000000..856be06
--- /dev/null
+++ b/shared/src/main/java/com/pinata/shared/EventResponse.java
@@ -0,0 +1,62 @@
+package com.pinata.shared;
+
+import java.util.Date;
+
+import flexjson.JSON;
+
+/**
+ * Event JSON Response from server to client.
+ */
+public class EventResponse extends ApiResponse {
+
+    /** EventID. */
+    @JSON(include=true, name="eventID")
+    public int eventID;
+
+    /** Event name */
+    @JSON(include=true, name="name")
+    public String name;
+
+    /** Event location */
+    @JSON(include=true, name="location")
+    public String location;
+
+    /** Event date and time */
+    @JSON(include=true, name="date")
+    public Date date;
+
+    /** Event is byob? */
+    @JSON(include=true, name="byob")
+    public boolean byob;
+
+
+    /**
+     * Creates uninitialized EventResponse for client side deserialization.
+     */
+    public EventResponse() {
+        this(null, -1, null, null, null, false);
+    }
+
+    /**
+     * Creates a new EventResponse object.
+     * @param status The status of the operation.
+     * @param eventID The ID of the new event.
+     * @param name The name of the event.
+     * @param location The location of the event.
+     * @param date The date and time of the new event.
+     * @param byob Bring your own beer to the event.
+     */
+    public EventResponse(ApiStatus status,
+                        int eventID,
+                        String name,
+                        String location,
+                        Date date,
+                        boolean byob) {
+        super(status);
+        this.eventID = eventID;
+        this.name = name;
+        this.location = location;
+        this.date = date;
+        this.byob = byob;
+    }
+}
